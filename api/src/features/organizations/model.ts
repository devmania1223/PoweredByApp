import { composeWithMongoose } from 'graphql-compose-mongoose';
import mongoose, { Document, Schema } from 'mongoose';
import Stripe from 'stripe';
import { liiingo } from '../../';
import { createCustomer } from '../../services/stripe';
import { logger } from '../../util/logger';
import { ModelWithTimestamps } from '../modeltypes';
import { UserModel } from '../users/model';
import { UserTC } from '../users/typedefs';

export const OrganizationSchema = new Schema(
  {
    name: {
      type: String,
      trim: true,
    },
    //https://www.drupal.org/project/addressfield
    address: {
      country: String,
      administrativeArea: String,
      subAdministrativeArea: String,
      locality: String,
      postalCode: String,
      thoroughfare: String,
      premise: String,
    },
    email: {
      type: String,
      trim: true,
    },
    phone: {
      type: String,
      trim: true,
    },
    liiingoOrganizationId: {
      type: String,
    },
    type: {
      type: String,
      enum: ['child', 'provider', 'subscriber', 'partner'],
    },
    parentId: {
      type: String,
    },
    parentMenuId: {
      type: String,
    },
    userIds: [
      {
        type: Schema.Types.ObjectId,
        ref: 'users',
      },
    ],
    active: {
      type: Boolean,
      default: true,
    },
    stripeCustomerId: {
      type: String,
    },
    permissions: {
      organizationProfile: Boolean,
      brandedLiiingoApp: Boolean,
      hasLiiingoAccess: Boolean,
    },
  },
  {
    timestamps: {
      createdAt: 'createdAt',
      updatedAt: 'updatedAt',
    },
    collection: 'organizations',
  }
);

OrganizationSchema.index({ createdAt: 1, updatedAt: 1 });

export type OrganizationAddress = {
  country: string;
  administrativeArea: string;
  subAdministrativeArea?: string;
  locality: string;
  postalCode: string;
  thoroughfare?: string;
  premise?: string;
};

export interface OrganizationModel extends Document<string>, ModelWithTimestamps {
  name: string;
  address: OrganizationAddress;
  email: string;
  phone: string;
  active: boolean;
  stripeCustomerId: string;
  liiingoOrganizationId: string;
  userIds: string[];
  type: 'child' | 'provider' | 'subscriber' | 'partner';
  parentId: string;
  parentMenuId: string;
  permissions: {
    organizationProfile: boolean;
    brandedLiiingoApp: boolean;
    hasLiiingoAccess: boolean;
  };
}

// this will make find, findOne typesafe
export const Organization = mongoose.model<OrganizationModel>('Organization', OrganizationSchema);

const OrganizationTC = composeWithMongoose(Organization, {
  inputType: {
    removeFields: [
      'active',

      // Remove the 'URL' args from the Organization mutations because we will never directly set the URLs for images.
      // We'll upload image files and the URLs will be generated by S3
      'customQrLogoImageUrl',
      'headerImageUrl',
      'headerLogoImageUrl',
      'topicImageUrl',
      'topicBackgroundImageUrl',

      'stripeCustomerId',

      'liiingoContentIds',
      'liiingoOrganizationId',
      'liiingoLocationId',
      'liiingoAreaId',
      'liiingoExhibitId',
      'liiingoQrCode',
      'liiingoUrl',

      'plan',
      'permissions',
      'createdAt',
      'updatedAt',
    ],
  },
});
// Now remove the password field from the OUTPUT type so that it won't appear in any api responses.
OrganizationTC.addRelation<UserModel>('users', {
  resolver: () => UserTC.getResolver('findMany'),
  prepareArgs: {
    filter: (source) => ({
      _operators: {
        _id: {
          in: source.userIds || [],
        },
      },
    }),
  },
  projection: { userIds: true },
});
OrganizationTC.removeField('userIds'); // Hide the Organization.userIds field because we're replacing it with a Users collection instead

export const attachLiiingoAccount = async (organization: OrganizationModel): Promise<OrganizationModel> => {
  if (organization.liiingoOrganizationId) {
    logger.info(`not attaching a new liiingo account to ${organization.name} as it already has one`);
    return organization;
  }

  const liiingoOrganization = await liiingo.createOrganization({
    name: organization.name || 'placeholder',
    email: organization.email,
    type: organization.type || 'subscriber',
    password: 'cake-GANDOLF-werewolf', // yep. this is happening. For now.
    password2: 'cake-GANDOLF-werewolf', // ...twice.
    // TODO: we may want to set 'subscription_active': false here to prevent the user from logging into the liiingo admin panel directly.
  });
  organization.liiingoOrganizationId = liiingoOrganization.organizationId;
  await organization.save();

  logger.info(
    `Attached Liiingo Organization ${liiingoOrganization?.organizationId} to onboarding Organization ${organization._id}`
  );

  return organization;
};

/**
 * @deprecated Remove this
 */
export const setFreePermissions = (organization: OrganizationModel): OrganizationModel => {
  organization.permissions = {
    organizationProfile: false,
    brandedLiiingoApp: false,
    hasLiiingoAccess: false,
  };
  return organization;
};

/**
 * @deprecated Remove this
 */
export const setPlusPermissions = (organization: OrganizationModel): OrganizationModel => {
  organization.permissions = {
    organizationProfile: true,
    brandedLiiingoApp: true,
    hasLiiingoAccess: false,
  };
  return organization;
};

export interface CreateOrganizationProps {
  name: string;
  email: string;
  type: OrganizationModel['type'];
}
export const createOrganization = async ({
  name,
  email,
  type,
}: CreateOrganizationProps): Promise<OrganizationModel> => {
  const organization = new Organization();
  organization.name = name;
  organization.email = email;
  organization.type = type;
  // organization.referrer = referrer; // This should be a property on the App/Location, not the Organization

  // Stripe
  const customer: Promise<Stripe.Customer> = createCustomer({ email: email });
  organization.stripeCustomerId = (await customer).id;

  // Create a Liiingo account
  return await attachLiiingoAccount(organization); // This actually saves the organization to the db with the liiingoOrganizationId
};

export { OrganizationTC };
